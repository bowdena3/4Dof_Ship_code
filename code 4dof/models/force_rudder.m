function force_rudder(block)
% ship_dynamics.m     mail     08/07/2021
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This is a Level-2 Matlab S-function for the modelling of the dynamics of
% an rudder in 4 DOF.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    setup(block);
end

%% Set up the block:
function setup(block)
    % Register number of input and output ports:
    block.NumInputPorts  = 3;
    block.NumOutputPorts = 1;

    % Setup functional port properties to dynamically inherited:
    block.SetPreCompInpPortInfoToDynamic;
    block.SetPreCompOutPortInfoToDynamic;
    
    % Size the input ports correctly:
    block.InputPort(1).Dimensions    = 1;    % control input vector (AOA)
    % Specify whether there is direct feedthrough:
    block.InputPort(1).DirectFeedthrough = true;
    block.InputPort(1).SamplingMode  = 'Sample';
    % Size the input ports correctly:
    block.InputPort(2).Dimensions    = 3;    % control input vector (ship vector)
    % Specify whether there is direct feedthrough:
    block.InputPort(2).DirectFeedthrough = true;
    block.InputPort(2).SamplingMode  = 'Sample';
    % Size the input ports correctly:
    block.InputPort(3).Dimensions    = 1;    % input vector (propeller thrust)
    % Specify whether there is direct feedthrough:
    block.InputPort(3).DirectFeedthrough = true;
    block.InputPort(3).SamplingMode  = 'Sample';
    
    % Size the output port correctly:
    block.OutputPort(1).Dimensions   = 4;        % Sail forces (return sail forces) (Fwing_x,Fwing_y,Fwing_yaw,Fwing_roll)
    % Set the output ports' sampling mode:
    block.OutputPort(1).SamplingMode = 'Sample';
    % Size the output port correctly:

    % Define the number of parameters:
    block.NumDialogPrms = 5;                     % number of parameters the s fucntion accepts - change

    % Set block sample time to continuous:
    block.SampleTimes = [0,0];
    % Set the block simStateCompliance to default:
    block.SimStateCompliance = 'DefaultSimState';

    % Register methods:
    block.RegBlockMethod('PostPropagationSetup', @PostPropagationSetup);
%     block.RegBlockMethod('InitializeConditions', @InitialConditions);
    block.RegBlockMethod('Outputs',              @Output);    
%     block.RegBlockMethod('Derivatives',          @Derivative);
end

%% Set up the dynamic work vector:
function PostPropagationSetup(block)                % setting up memory - does work without
    % Setup Dwork:
    block.NumDworks                = 1;
    block.Dwork(1).Name            = 'inertial_velocity'; 
    block.Dwork(1).Dimensions      = 4;
    block.Dwork(1).DatatypeID      = 0;
    block.Dwork(1).Complexity      = 'Real';
    block.Dwork(1).UsedAsDiscState = true;
end

%% Output the continuous states:        %% put all in output block
function Output(block)   

    % Extract the input parameters:        % to change
    rudder  = block.DialogPrm(1).Data;     % rudder data
    d  = block.DialogPrm(2).Data;          % distance to COG
    AOA_rud  = block.DialogPrm(3).Data;         % rudder AOA data
    Cl_rud  = block.DialogPrm(4).Data;          % rudder Cl data
    Cd_rud  = block.DialogPrm(5).Data;          % rudder Cd data
    
    % Extract the input vector:
    delta = block.InputPort(1).Data;            % rudder angle [rads] - local (oriantated to apparent wind angle)
    ship_velocity = block.InputPort(2).Data;          % ship velocity
    Thrust  = block.InputPort(3).Data;                % ship thrust
    
    % To make the code clearer, copy all desired parameters and states:
    % Input vectors:
    u = ship_velocity(1);           % ship velocity x [m/s]
    v = ship_velocity(2);           % ship velocity y [m/s]
    psi = ship_velocity(3);         % ship yaw angle [rads]
    
    % Parameters:       % to change
    rho   = rudder(1);                 % density water  
    area  = rudder(2);                 % rudder area
    height  = rudder(3);               % height of rudder         
    
    % conpute the 4dof force generated by the wing
    % Apparant and acutal wind   - (Independant of ship angle, dependent on course path) is it global coordinates?
    Vs = sqrt(u^2 + v^2);                                        % Ship speed [m/s]
    % Prevents u = 0 causing infinite angles due to v/u
    sign = (0.5-isreal(sqrt(-u)))*2;           % calculate u sighn
    u = sign*(abs(u)+0.0001);                  % add 0.001 to absolute valie of u
    S_theta = atand(v/u);                               % Ship course angle [degrees] (atan for rads) - global +0.0001 so that inital velocity is not 0
    
%     AOA = delta + S_theta;                  % angle of attack on rudder
    AOA = rad2deg(delta) + rad2deg(psi) - S_theta;                  % angle of attack on rudder

    Cl = interp1(AOA_rud,Cl_rud,AOA);     % Coeffent of lift
    Cd = interp1(AOA_rud,Cd_rud,AOA);     % Coeffent of drag
    
    % Prevents Cl = 0 causing infinite angles due to Cd/Cl
    sign = (0.5-isreal(sqrt(-Cd)))*2;           % calculate Cl sign
    Cd = sign*(abs(Cd)+0.0001);                 % add 0.001 to absolute value of Cl
    
    F_net = 0.5*sqrt(Cl^2 + Cd^2)*rho*area*Vs^2;   % force on rudder [N]
    F_theta = atand(Cl/Cd);                      % angle on rudder [degrees] (atan for rads) - local (oriantated to 90deg of coursw angle)
    
    
    F_surge = -F_net*cosd(F_theta-S_theta);                    % surge force on ship [N] - global (x co-ordinates)
    F_sway = F_net*sind(F_theta-S_theta);                     % sway force on ship [N] - global (y co-ordinates)
    
%     Fhs = F_net*cosd(F_theta+rad2deg(psi)-S_theta);          % hydrodynamic resisting force [N]
    Fhs = F_net*sind(F_theta+rad2deg(psi)-S_theta);          % hydrodynamic side force [N]
    
    % compute Yaw and Roll tourque
    T_roll = -Fhs*0.5*height;                          % roll torque on ship [Nm]
    T_yaw = -Fhs*d;                                    % yaw torque on ship [Nm]
        
    % Trust propeller
    % Approximate thrust generated by propeller
%     Thrust = 1e6;              % [N]
    Thrust_surge = Thrust*cos(psi);      % [N]
    Thrust_sway = Thrust*sin(psi);       % [N]
    control = [(F_surge+Thrust_surge);(F_sway+Thrust_sway);T_roll;T_yaw];            % [surge,sway,roll,yaw]   
    
    % Output the force applied to the ship:
    block.OutputPort(1).Data = control;
end

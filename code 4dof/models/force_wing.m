function force_wing(block)
% ship_dynamics.m     mail     08/07/2021
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This is a Level-2 Matlab S-function for the modelling of the dynamics of
% an sail in 4 DOF.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    setup(block);
end

%% Set up the block:
function setup(block)
    % Register number of input and output ports:
    block.NumInputPorts  = 3;
    block.NumOutputPorts = 1;

    % Setup functional port properties to dynamically inherited:
    block.SetPreCompInpPortInfoToDynamic;
    block.SetPreCompOutPortInfoToDynamic;
    
    % Size the input ports correctly:
    block.InputPort(1).Dimensions    = 1;    % control input vector (AOA)
    % Specify whether there is direct feedthrough:
    block.InputPort(1).DirectFeedthrough = true;
    block.InputPort(1).SamplingMode  = 'Sample';
    % Size the input ports correctly:
    block.InputPort(2).Dimensions    = 3;    % control input vector (ship vector)
    % Specify whether there is direct feedthrough:
    block.InputPort(2).DirectFeedthrough = true;
    block.InputPort(2).SamplingMode  = 'Sample';
    % Size the input ports correctly:
    block.InputPort(3).Dimensions    = 2;    % control input vector (wind vector)
    % Specify whether there is direct feedthrough:
    block.InputPort(3).DirectFeedthrough = true;
    block.InputPort(3).SamplingMode  = 'Sample';
    
    % Size the output port correctly:
    block.OutputPort(1).Dimensions   = 4;        % Sail forces (return sail forces) (Fwing_x,Fwing_y,Fwing_yaw,Fwing_roll)
    % Set the output ports' sampling mode:
    block.OutputPort(1).SamplingMode = 'Sample';
    % Size the output port correctly:

    % Register the continuous states:
%     block.NumContStates = 8;                     % 8 continous states - to change
%     block.NumContStates = 8;                     % 8 continous states - to change
    
    % Define the number of parameters:
    block.NumDialogPrms = 9;                     % number of parameters the s fucntion accepts - change

    % Set block sample time to continuous:
    block.SampleTimes = [0,0];
    % Set the block simStateCompliance to default:
    block.SimStateCompliance = 'DefaultSimState';

    % Register methods:
    block.RegBlockMethod('PostPropagationSetup', @PostPropagationSetup);
%     block.RegBlockMethod('InitializeConditions', @InitialConditions);
    block.RegBlockMethod('Outputs',              @Output);    
%     block.RegBlockMethod('Derivatives',          @Derivative);
end

%% Set up the dynamic work vector:
function PostPropagationSetup(block)                % setting up memory - does work without
    % Setup Dwork:
    block.NumDworks                = 1;
    block.Dwork(1).Name            = 'inertial_velocity'; 
    block.Dwork(1).Dimensions      = 4;
    block.Dwork(1).DatatypeID      = 0;
    block.Dwork(1).Complexity      = 'Real';
    block.Dwork(1).UsedAsDiscState = true;
end

%% Output the continuous states:        %% put all in output block
function Output(block)   

    % Extract the input parameters:      % to change
    wing  = block.DialogPrm(1).Data;     % wing data
    d  = block.DialogPrm(2).Data;     % distance to COG
    Cl_angle = block.DialogPrm(3).Data;     
    Cl_data = block.DialogPrm(4).Data;      
    Cd_angle = block.DialogPrm(5).Data;     
    Cd_data = block.DialogPrm(6).Data;      
    wind_oriantation = block.DialogPrm(7).Data;     
    Cl_ratio = block.DialogPrm(8).Data;      
    Cd_ratio = block.DialogPrm(9).Data;   
    
    % Extract the input vector:
%     in = block.InputPort(1).Data;
    AOA = block.InputPort(1).Data;          % wing angle of attack [degrees] - local (oriantated to apparent wind angle)
    ship_velocity = block.InputPort(2).Data;          % ship velocity
    wind_vector = block.InputPort(3).Data;           % Prevailing wind vector
    
    % To make the code clearer, copy all desired parameters and states:
    % Input vectors:
%     AOA = in(1);          % wing angle of attack [degrees] - local (oriantated to apparent wind angle)
    
%     ship_velocity = in(2);          % ship velocity
    u = ship_velocity(1);           % ship velocity x [m/s]
    v = ship_velocity(2);           % ship velocity y [m/s]
    phi = ship_velocity(3);         % ship yaw angle [rads]
    
%     wind_vector = in(3);           % Prevailing wind vector
    Wv = wind_vector(1);           % Prevailing wind speed [m/s]
    W_theta = wind_vector(2);      % Prevailing wind angle [degrees]
    
    % Parameters:       % to change
    rho   = wing(1);                 % density air  
    area  = wing(2);                 % Sail area
    height  = wing(3);               % height of wing         
    
    % conpute the 4dof force generated by the wing
    % Apparant and acutal wind   - (Independant of ship angle, dependent on course path) is it global coordinates?
    Vs = sqrt(u^2 + v^2);                                      % Ship speed [m/s]
    S_theta = atand(v/(u+0.0001));                               % Ship course angle [degrees] (atan for rads) - global +0.0001 so that inital velocity is not 0
    TWA = 180+S_theta-W_theta;                         % True wind angle [degrees] - local (oriantated to ship course)
    Va = sqrt(Vs^2+Wv^2-2*Vs*Wv*cosd(TWA));        % Apparant wind speed [m/s]
    AWA = asind((Wv/Va)*sind(TWA));               % Apparant wind angle (check) [degrees] - local (oriantated to ship course)
        
    Cl1 = interp1(Cl_angle,Cl_data,AOA);     % Coeffent of lift
    Cd1 = interp1(Cd_angle,Cd_data,AOA);     % Coeffent of drag
    
    % Scale coeffents of drag based on data from Bordogna, G et al., (2018)
    W_O = AWA + S_theta - rad2deg(phi);    % wind oriantation angle - angle between wind and ship angle
    Cl_ratio = interp1(wind_oriantation,Cl_ratio,W_O);
    Cd_ratio = interp1(wind_oriantation,Cd_ratio,W_O);
    Cl2 = Cl_ratio*Cl1;                       % calculating 2 sail Cl
    Cd2 = Cd_ratio*Cd1;                       % calculating 2sail Cd
       
%     lift = 0.5*Cl*rho*area*Va^2;  % lift [N]
%     drag = 0.5*Cd*rho*area*Va^2;  % drag [N]
    F_net = 0.5*sqrt(Cl2^2 + Cd2^2)*rho*area*Va^2;   % force on sail [N]
    F_theta_l = atand(Cd2/Cl2);                      % angle on sail [degrees] (atan for rads) - local (oriantated to 90deg of AWA)
%     Far = F_net*sind(AWA-F_theta_l);               % aerodynamic driving force [N] (atan for rads) - local (oriantated to course)
%     Fas = F_net*cosd(AWA-F_theta_l);               % aerodynamic side force [N] (atan for rads) - local (oriantated to course)
    F_theta = (90 + F_theta_l - AWA - S_theta);      % angle on sail [degrees] - global (oriantated to x and y)
    F_surge = F_net*cosd(F_theta);                    % surge force on ship [N] - global (x co-ordinates)
    F_sway = F_net*sind(F_theta);                     % sway force on ship [N] - global (y co-ordinates)
    
    % compute Yaw and Roll tourque
    Fas = F_surge*cosd(phi) + F_sway*cosd(phi);       % aerodynamic side force [N]
    T_yaw = Fas*d;                                    % yaw torque on ship [Nm]
    T_roll = Fas*0.5*height;                              % roll torque on ship [Nm]
            
    control = [F_surge;F_sway;T_yaw;T_roll];            % [surge,sway,roll,yaw]
        
    % Store the inertial velocity as a work vector:
%     block.Dwork(1).Data = control;

    % Output the force applied to the ship:
%     block.OutputPort(1).Data = block.Dwork(1).Data;
    block.OutputPort(1).Data = control;
end
